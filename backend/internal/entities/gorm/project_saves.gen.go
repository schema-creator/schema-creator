// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/schema-creator/schema-creator/schema-creator/internal/entities/model"
)

func newProjectSafe(db *gorm.DB, opts ...gen.DOOption) projectSafe {
	_projectSafe := projectSafe{}

	_projectSafe.projectSafeDo.UseDB(db, opts...)
	_projectSafe.projectSafeDo.UseModel(&model.ProjectSafe{})

	tableName := _projectSafe.projectSafeDo.TableName()
	_projectSafe.ALL = field.NewAsterisk(tableName)
	_projectSafe.ProjectSaveID = field.NewString(tableName, "project_save_id")
	_projectSafe.ProjectID = field.NewString(tableName, "project_id")
	_projectSafe.Editor = field.NewString(tableName, "editor")
	_projectSafe.Object = field.NewString(tableName, "object")
	_projectSafe.SavedBy = field.NewString(tableName, "saved_by")
	_projectSafe.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectSafe.fillFieldMap()

	return _projectSafe
}

type projectSafe struct {
	projectSafeDo projectSafeDo

	ALL           field.Asterisk
	ProjectSaveID field.String
	ProjectID     field.String
	Editor        field.String
	Object        field.String
	SavedBy       field.String
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (p projectSafe) Table(newTableName string) *projectSafe {
	p.projectSafeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectSafe) As(alias string) *projectSafe {
	p.projectSafeDo.DO = *(p.projectSafeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectSafe) updateTableName(table string) *projectSafe {
	p.ALL = field.NewAsterisk(table)
	p.ProjectSaveID = field.NewString(table, "project_save_id")
	p.ProjectID = field.NewString(table, "project_id")
	p.Editor = field.NewString(table, "editor")
	p.Object = field.NewString(table, "object")
	p.SavedBy = field.NewString(table, "saved_by")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectSafe) WithContext(ctx context.Context) *projectSafeDo {
	return p.projectSafeDo.WithContext(ctx)
}

func (p projectSafe) TableName() string { return p.projectSafeDo.TableName() }

func (p projectSafe) Alias() string { return p.projectSafeDo.Alias() }

func (p projectSafe) Columns(cols ...field.Expr) gen.Columns { return p.projectSafeDo.Columns(cols...) }

func (p *projectSafe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectSafe) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["project_save_id"] = p.ProjectSaveID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["editor"] = p.Editor
	p.fieldMap["object"] = p.Object
	p.fieldMap["saved_by"] = p.SavedBy
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectSafe) clone(db *gorm.DB) projectSafe {
	p.projectSafeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectSafe) replaceDB(db *gorm.DB) projectSafe {
	p.projectSafeDo.ReplaceDB(db)
	return p
}

type projectSafeDo struct{ gen.DO }

func (p projectSafeDo) Debug() *projectSafeDo {
	return p.withDO(p.DO.Debug())
}

func (p projectSafeDo) WithContext(ctx context.Context) *projectSafeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectSafeDo) ReadDB() *projectSafeDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectSafeDo) WriteDB() *projectSafeDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectSafeDo) Session(config *gorm.Session) *projectSafeDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectSafeDo) Clauses(conds ...clause.Expression) *projectSafeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectSafeDo) Returning(value interface{}, columns ...string) *projectSafeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectSafeDo) Not(conds ...gen.Condition) *projectSafeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectSafeDo) Or(conds ...gen.Condition) *projectSafeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectSafeDo) Select(conds ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectSafeDo) Where(conds ...gen.Condition) *projectSafeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectSafeDo) Order(conds ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectSafeDo) Distinct(cols ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectSafeDo) Omit(cols ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectSafeDo) Join(table schema.Tabler, on ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectSafeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectSafeDo) RightJoin(table schema.Tabler, on ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectSafeDo) Group(cols ...field.Expr) *projectSafeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectSafeDo) Having(conds ...gen.Condition) *projectSafeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectSafeDo) Limit(limit int) *projectSafeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectSafeDo) Offset(offset int) *projectSafeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectSafeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *projectSafeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectSafeDo) Unscoped() *projectSafeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectSafeDo) Create(values ...*model.ProjectSafe) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectSafeDo) CreateInBatches(values []*model.ProjectSafe, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectSafeDo) Save(values ...*model.ProjectSafe) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectSafeDo) First() (*model.ProjectSafe, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSafe), nil
	}
}

func (p projectSafeDo) Take() (*model.ProjectSafe, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSafe), nil
	}
}

func (p projectSafeDo) Last() (*model.ProjectSafe, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSafe), nil
	}
}

func (p projectSafeDo) Find() ([]*model.ProjectSafe, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectSafe), err
}

func (p projectSafeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectSafe, err error) {
	buf := make([]*model.ProjectSafe, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectSafeDo) FindInBatches(result *[]*model.ProjectSafe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectSafeDo) Attrs(attrs ...field.AssignExpr) *projectSafeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectSafeDo) Assign(attrs ...field.AssignExpr) *projectSafeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectSafeDo) Joins(fields ...field.RelationField) *projectSafeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectSafeDo) Preload(fields ...field.RelationField) *projectSafeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectSafeDo) FirstOrInit() (*model.ProjectSafe, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSafe), nil
	}
}

func (p projectSafeDo) FirstOrCreate() (*model.ProjectSafe, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectSafe), nil
	}
}

func (p projectSafeDo) FindByPage(offset int, limit int) (result []*model.ProjectSafe, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectSafeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectSafeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectSafeDo) Delete(models ...*model.ProjectSafe) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectSafeDo) withDO(do gen.Dao) *projectSafeDo {
	p.DO = *do.(*gen.DO)
	return p
}
